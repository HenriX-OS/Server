const { addonBuilder, serveHTTP } = require("stremio-addon-sdk");
const axios = require("axios");
const https = require("https");

const manifest = {
    "id": "org.community.redecanaistv",
    "version": "1.0.0",
    "name": "RedeCanaisTV",
    "logo": "https://example.com/logo.png",
    "background": "https://example.com/background.jpg",
    "description": "Addon do Stremio para assistir RedeCanaisTV diretamente, sem precisar do navegador.",
    "types": ["tv"],
    "resources": ["stream", "catalog"],
    "catalogs": [
        {
            "id": "redecanaistv.catalog",
            "name": "RedeCanaisTV",
            "type": "tv",
            "extra": [
                {
                    "name": "genre",
                    "options": ["Notícias", "Esportes", "Filmes", "Séries", "Documentários", "Música"],
                    "optionsLimit": 10,
                    "isRequired": false
                }
            ]
        }
    ],
    "idPrefixes": ["tv"],
    "behaviorHints": {
        "configurable": false,
        "configurationRequired": false
    }
};

const builder = new addonBuilder(manifest);
let canais = [];

// URL do proxy
const proxyURL = "http://20.206.106.192:8123/"; // Inclua o protocolo HTTP ou HTTPS

// Configuração do Axios para aceitar todos os certificados
const axiosInstance = axios.create({
    httpsAgent: new https.Agent({  
        rejectUnauthorized: false // Aceita todos os certificados, incluindo inválidos
    })
});

// Carrega a lista M3U8 e extrai os canais
async function carregarListaM3U8() {
    try {
        const response = await axiosInstance.get("https://raw.githubusercontent.com/HenriX-OS/Server/refs/heads/main/Listas");
        const listaM3U8 = response.data;

        // Processa a lista M3U8 para extrair os canais
        const regex = /#EXTINF:-1.*tvg-name="([^"]+)".*\n(.+)/g;
        let match;
        while ((match = regex.exec(listaM3U8)) !== null) {
            const [_, title, url] = match;
            canais.push({
                id: title.toLowerCase().replace(/\s+/g, "_"), // ID baseado no nome do canal
                title,
                genre: "Geral", // Categoria padrão (pode ser ajustada)
                url
            });
        }
    } catch (error) {
        console.error("Erro ao carregar a lista M3U8:", error);
    }
}

// Carrega a lista ao iniciar o addon
carregarListaM3U8();

builder.defineCatalogHandler(({ type, extra }) => {
    if (type === "tv") {
        const filteredCanais = extra && extra.genre
            ? canais.filter(canal => canal.genre === extra.genre)
            : canais;
        const metas = filteredCanais.map(canal => ({
            id: canal.id,
            name: canal.title,
            type: "tv",
            poster: "https://example.com/channel_poster.png",
            background: "https://example.com/channel_background.jpg",
            logo: "https://example.com/channel_logo.png",
            genre: [canal.genre]
        }));
        return Promise.resolve({ metas });
    }
    return Promise.resolve({ metas: [] });
});

builder.defineStreamHandler(({ id }) => {
    const canal = canais.find(c => c.id === id);
    if (canal) {
        // Modifica a URL do canal para passar pelo proxy
        const proxiedUrl = `${proxyURL}${encodeURIComponent(canal.url)}`;
        return Promise.resolve({
            streams: [
                {
                    title: canal.title,
                    url: proxiedUrl,
                    behaviorHints: { notWebReady: true }
                }
            ]
        });
    }
    return Promise.resolve({ streams: [] });
});

serveHTTP(builder.getInterface(), { port: 7000 });
